// Distributed under the MIT License.
// See LICENSE.txt for details.

module Main {

  include "Parallel/ReductionDeclare.hpp";
  include "Utilities/Functional.hpp";
  include "Utilities/TaggedTuple.hpp";

  namespace Parallel {
  template <typename Metavariables>
  mainchare[migratable] Main {
    entry Main(CkArgMsg* msg);
    entry void allocate_array_components_and_execute_initialization_phase();

    template <typename InvokeCombine, typename... Tags>
    entry[reductiontarget] void phase_change_reduction(
        Parallel::ReductionData<Parallel::ReductionDatum<
            tuples::TaggedTuple<Tags...>, InvokeCombine, funcl::Identity,
            std::index_sequence<>>>
            reduction_data);

    entry void execute_next_phase();
    entry void start_load_balance();
    entry void start_write_checkpoint();
  }

  namespace detail {
  template <typename Metavariables>
  array [1D] AtSyncIndicator {
    entry AtSyncIndicator(CProxy_Main<Metavariables> main_proxy);

    entry void IndicateAtSync();
  }
  }  // namespace detail
  }  // namespace Parallel
}
